// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Token defines model for Token.
type Token struct {
	Token string `json:"token"`
}

// UserCredentials defines model for UserCredentials.
type UserCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// UserDetail defines model for UserDetail.
type UserDetail struct {
	Email    string `json:"email"`
	Fullname string `json:"fullname"`
	Username string `json:"username"`
	Uuid     string `json:"uuid"`
}

// AuthenticateJSONRequestBody defines body for Authenticate for application/json ContentType.
type AuthenticateJSONRequestBody = UserCredentials

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /_health)
	Health(ctx echo.Context) error

	// (GET /_private/api/v1/user/{uuid})
	GetUserDetail(ctx echo.Context, uuid string) error

	// (POST /api/v1/auth)
	Authenticate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Health(ctx)
	return err
}

// GetUserDetail converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserDetail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserDetail(ctx, uuid)
	return err
}

// Authenticate converts echo context to params.
func (w *ServerInterfaceWrapper) Authenticate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authenticate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/_health", wrapper.Health)
	router.GET(baseURL+"/_private/api/v1/user/:uuid", wrapper.GetUserDetail)
	router.POST(baseURL+"/api/v1/auth", wrapper.Authenticate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVQW/bOgz+KwLfA95FiN3X7uLTug3Yeiuw7TQEhWoxsVpH0kQ6RVH4vw+0lcStk24Y",
	"tlMEhqQ+ft9H+QnqsInBo2eC6gmobnBjhuOXcI9eDjGFiIkdDmHehfkxIlRAnJxfQ99rSPi9cwktVN9y",
	"2lLv0sLtHdYMvYavhOl9QouenWlpfkM0RA8h2SOXaOgIkzcb/DmCfaY+dDyF5wOyce0cCm5yeIZj1bXt",
	"CRyvgtTQdc7+AnrJ0tMh9jfqDGs+jDRxfhWkfR08m5onU8CtSY7eWtwu2lCbVsBYpDq5yC54qOA6ha2z",
	"SMp4dXl9pRpsIynBoDgo03EjotWGURlvVeAGkyJMW1cjScoaeUy3A6EEGthxKxiFZvV5zJXmoGGLicaL",
	"y8XZohQ8IaI30UEF54tycT5ox82gRXHToGm5kfMah8FEKiPYryxU8Gn8W3ikGDyNEv5flvLzfNCMWTlS",
	"DyHdO79Wo/Dto6B4U56/WuMDH6nrNbBZk6iXkS4lVtzE5LaGsTDRFduzQggqnkTg/uQsH5EnvhQWktkg",
	"Y5L2L5FJw/9IZcs4CQlroGE04c5MB39x6lDnZT/mxeVxEsVT6Ae4JsZWnOCCL+4o+MPjIad/E66ggn+K",
	"w+tS5KelmMw1GHY+S3aPKHFRXsyVGHJEg1XovH1GfKY6M58JF+MOux3oCNWXE1tnkpD4XbCPf3Tk6ZPX",
	"9+O6/yWGx5f7FLnTNba/w/FA57KfhF4W79Z8XAPnkehgxrwbvX5ZNRFCAvuC4b55+vUotUJvY3Dy/dpX",
	"7FzQL/sfAQAA//84tsQx4QYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
